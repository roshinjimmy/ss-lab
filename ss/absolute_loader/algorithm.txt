 begin
	read Header record
 	verify program name and length
	read first Text record
	while record type is != ‘E’ do 
		begin
			{if object code is in character form, convert into internal representation}
			move object code to specified location in memory
			read next object program record
		end
    jump to address specified in End record 
end

-----------------------------------------------------------------------------------------

Initialize:

Declare file pointers inputFile and outputFile to handle file operations.
Declare variables: i, startAddress, currentAddress, programName, line, extractedName, and addressStr.
Get Program Name from User:

Prompt the user to enter the program name and store it in programName.
Open Files:

Open "input.txt" for reading and "output.txt" for writing.
If either file fails to open, display an error message using perror and terminate the program.
Extract Program Name from Input File:

Read the first line of input.txt into line.
Extract characters from index 2 to 7 of line (which is expected to be the program name in the header) and store them in extractedName.
Add a null terminator to extractedName to make it a proper string.
Print extractedName to confirm the name read from the file.
Compare Program Names:

If programName matches extractedName, proceed with processing the file.
Otherwise, skip the file processing.
Process Text Records:

Loop through each line in the input file until reaching the end-of-file (EOF).
For each line:
If the line starts with 'T' (indicating a Text record):

Extract the starting address of the text record from characters 2 to 7 of line and store it in addressStr.
Convert addressStr to an integer and store it in currentAddress.
Set i to 12, which is where the object codes are expected to begin in the line.
Loop through the remaining characters in line until encountering the end symbol '$':
If the character is not '^' (a delimiter):
Print and write to outputFile the current address and the two hexadecimal characters (line[i] and line[i + 1]) representing an object code byte.
Increment currentAddress by 1.
Increment i by 2 to move to the next byte in the line.
If the character is '^', skip it by incrementing i by 1.
If the line starts with 'E' (indicating the End record), break out of the loop.

Close Files:

Close both inputFile and outputFile.
End Program:

Exit the program.